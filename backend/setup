#!/bin/bash

SONGS="$HOME/Documents/pi/Data/Music/Songs"
VIDEOS="$HOME/Documents/pi/Data/Music/Videos"
ORIGINAL_FILES="$HOME/Documents/pi/Data/Music/Originals"
MISSING_METADATA="$HOME/Documents/pi/Data/Music/Missing-Metadata"
DB_FILE="$HOME/Documents/pi/python/envs/music-player/data/music.db"

mkdir -p "$ORIGINAL_FILES"
mkdir -p "$MISSING_METADATA"
mkdir -p "$VIDEOS"

RED='\033[31m'
GREEN='\033[32m'
CYAN='\033[36m'
NC='\033[0m'

# moves all audio files to top of the SONGS folder
while IFS= read -r -d '' file; do
  mv "$file" "$SONGS" 2> /dev/null
done < <(find "$SONGS" -type f \( -name '*.opus' -o -name '*.m4a' -o -name '*.mp3' \) -print0)

# removes all empty folders
for folder in "$SONGS"/*/; do
  rmdir "$folder" 2>/dev/null
done

printf "${CYAN}Convert files to mp3...${NC}\n"

all_count="$(ls -l $SONGS/*.mp3 $VIDEOS/*.mp4 2> /dev/null | wc -l | xargs)"
max_convert_count="$(ls -l $SONGS/*.{opus,m4a} 2> /dev/null | wc -l | xargs)"
convert_counter=1
# converts files to mp3 while keeping metadata and moving original files
for file in $SONGS/*.{m4a,opus}; do
  if test ! -f "$file"; then  
    continue
  fi
  filename=$(basename "$file")
  dirname=$(dirname "$file")
  echo -ne "Converting ($convert_counter/$max_convert_count): $file"

  meta="-map_metadata 0:s:a:0"
  case $file in
    *.m4a) meta="";;
  esac

  # Convert file with metadata
  if ffmpeg -y -hide_banner -loglevel error -i "$file" -ac 2 -b:a 320k $meta "$dirname/${filename%.*}.mp3"; then
    # Move original file after successful conversion
    mv "$file" "$ORIGINAL_FILES"
    printf "${GREEN}Successfully converted:${NC} $filename\n"
    ((convert_counter++))
  else
    printf "${RED}Error converting:${NC} $filename\n"
    continue
  fi
done

if (($convert_counter > 1)); then
  echo -e "\n"
fi

printf "${CYAN}Done converting files${NC}\n"

for file in $SONGS/Suno\ *.mp3; do
  if test ! -f "$file"; then  
    continue 
  fi
  if [ "$(ffprobe -loglevel error -show_entries format_tags=title -of default=noprint_wrappers=1:nokey=1 "$file")" == "" ]; then
    mv "$file" "$MISSING_METADATA"
    ((all_count--))
  fi
done

# Add metadata to Suno Songs
for file in $MISSING_METADATA/Suno\ -*.mp3; do
  if test ! -f "$file"; then  
    continue 
  fi
  filename=$(basename "$file")
  dirname=$(dirname "$file")
  cleanname=${filename:7}
  new_file="$dirname/$cleanname"
  echo "Add metadata $filename"
  if ffmpeg -loglevel error -i "$file" -metadata title="${cleanname%.*}" -metadata artist="Suno" -metadata date="$(date +%Y)" -metadata comment="https://suno.com" "$new_file"; then
    printf "${GREEN}Successfully added metadata and renamed to $cleanname\n"
    if cp "$new_file" "$ORIGINAL_FILES"; then
      rm "$file"
    fi
    mv "$new_file" "$SONGS"
    ((all_count++))
  else
    printf "${RED}Error adding metadata:${NC} $filename\n"
    continue
  fi
done

hashs=()

printf "${CYAN}Adding track ids to array${NC}\n"
counter=1
for file in $SONGS/*.mp3; do
  if test ! -f "$file"; then  
    continue 
  fi
  track="$(ffprobe -loglevel error -show_entries format_tags=track -of default=noprint_wrappers=1:nokey=1 "$file")"
  if [ "$track" != "" ]; then
    hashs+=("$track")
    echo -ne "\r($counter/$all_count) -> added" 
    ((counter++))
  fi
done

for file in $VIDEOS/*.mp4; do
  if test ! -f "$file"; then  
    continue 
  fi
  # Get comment metadata
  comment="$(ffprobe -loglevel error -show_entries format_tags=comment -of default=noprint_wrappers=1:nokey=1 "$file")"
  # tr: replace ';' with "\n"
  # grep gets the line where the line starts with (^) "track:"
  # cut splits at ':' and gives second part (-f2)
  track=$(echo "$comment" | tr ';' '\n' | grep "^track:" | cut -d':' -f2)
  if [ "$track" != "" ]; then
    echo -ne "\r($counter/$all_count) -> added" 
    hashs+=("$track")
    ((counter++))
  fi
done

printf "\n${CYAN}Adding track id to each song/video if not present${NC}\n"

# Add track (id) to each Song if not present
counter=1
add_counter=1
for file in $SONGS/*.mp3; do
  if test ! -f "$file"; then  
    continue 
  fi
  basename=$(basename "$file")
  display_name=${basename:0:50}
  echo -ne "\r($add_counter/$all_count) -> add track ? : $display_name"
  if [ "$(ffprobe -loglevel error -show_entries format_tags=track -of default=noprint_wrappers=1:nokey=1 "$file")" == "" ]; then
    echo -ne "\r($add_counter/$all_count) -> adding track: $display_name"
    sha="$(sha256sum "$file")"
    track="s${sha:0:8}"


    while [[ ${hashs[@]} =~ $track ]]; do
      if (( $counter >= 56 )); then
        echo "$RED This is really unlikely...$NC"
        echo "File: $file"
        continue
      else
        track="s${sha:counter:$((8+counter))}"
        ((counter++))
      fi
    done
    counter=1
    
    hashs+=("$track")
    
    ffmpeg -loglevel error -i "$file" -metadata track="$track" -codec copy -f $file_ext "${file}.tmp" && \
    mv "${file}.tmp" "$file"

    printf "${GREEN}($add_counter/$all_count) Added track ID $track to $(basename "$file")${NC}\n"
  fi
  ((add_counter++))
done

((add_counter--))
# Add track id to videos if not present
for file in $VIDEOS/*.mp4; do
  if test ! -f "$file"; then  
    continue 
  fi
  ((add_counter++))
  basename=$(basename "$file")
  display_name=${basename:0:50}
  echo -ne "\r($add_counter/$all_count) -> add track ? : $display_name"

  comment=$(ffprobe -loglevel error -show_entries format_tags=comment -of default=noprint_wrappers=1:nokey=1 "$file")

  case $comment in
    yt:*) continue;;
  esac

  echo -ne "\r($add_counter/$all_count) -> adding track: $display_name"

  sha="$(sha256sum "$file")"
  track="v${sha:0:8}"

  while [[ ${hashs[@]} =~ $track ]]; do
    if (( $counter >= 56 )); then
      echo "This is really unlikely..."
      echo "File: $file"
      continue
    else
      track="v${sha:counter:$((8+counter))}"
      ((counter++))
    fi
  done

  new_comment="yt:$comment;track:$track"

  counter=1

  hashs+=("$track")
  
  ffmpeg -loglevel error -i "$file" -metadata comment="$new_comment" -codec copy -f mp4 "${file}.tmp" && \
  mv "${file}.tmp" "$file"

  printf "${GREEN}($add_counter/$all_count) Added track ID $track to $(basename "$file")${NC}\n"
done

printf "\n${CYAN}Initialize DB${NC}\n"

# initialize DB
sqlite3 $DB_FILE "PRAGMA foreign_keys = ON;"

# Create songs table
sqlite3 $DB_FILE "
CREATE TABLE IF NOT EXISTS songs (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT UNIQUE NOT NULL,
  artist_id TEXT,
  yt_link TEXT,
  date INTEGER,
  track_id TEXT UNIQUE,
  duration INTEGER,
  added INTEGER,
  rel_path TEXT,
  file_exists INTEGER DEFAULT 1,
  FOREIGN KEY (artist_id) REFERENCES artists(artist_id)
);
"
# Create songs_data table
sqlite3 $DB_FILE "
CREATE TABLE IF NOT EXISTS songs_data (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT UNIQUE NOT NULL,
  artist_id TEXT,
  album TEXT,
  genre TEXT,
  tags TEXT,
  listen_time_seconds INTEGER DEFAULT 0,
  last_played INTEGER DEFAULT 0,
  track_id TEXT UNIQUE,
  img_url TEXT,
  FOREIGN KEY (artist_id) REFERENCES artists(artist_id),
  FOREIGN KEY (track_id) REFERENCES songs(track_id) 
    ON UPDATE CASCADE
);
"
# Create artists table
sqlite3 $DB_FILE "
CREATE TABLE IF NOT EXISTS artists (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT UNIQUE NOT NULL,
  artist_id TEXT UNIQUE NOT NULL
);
"
# Create user table
sqlite3 $DB_FILE "
CREATE TABLE IF NOT EXISTS user (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  username TEXT UNIQUE NOT NULL,
  email TEXT UNIQUE NOT NULL,
  password TEXT NOT NULL,
  created_at INTEGER,
  last_login INTEGER,
  description TEXT,
  tags TEXT,
  subscription TEXT,  
  img_url TEXT,
  verified INTEGER DEFAULT 0,
  verify_email_code TEXT,
  code_expiry INTEGER
);
"
# Create user_sessions table
sqlite3 $DB_FILE "
CREATE TABLE IF NOT EXISTS user_sessions (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id INTEGER NOT NULL,
  session_token TEXT NOT NULL UNIQUE,
  expiry INTEGER NOT NULL,
  FOREIGN KEY (user_id) REFERENCES user(id) 
);
"
# Create user_song_data table
sqlite3 $DB_FILE "
CREATE TABLE IF NOT EXISTS user_song_data (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id INTEGER NOT NULL,
  track_id TEXT NOT NULL,
  listen_time_seconds INTEGER DEFAULT 0,
  favorite INTEGER DEFAULT 0,
  rating INTEGER DEFAULT 0 CHECK (rating >= 0 AND rating <= 5),
  last_played INTEGER,
  skip_count INTEGER DEFAULT 0,
  first_played INTEGER,
  added_to_library INTEGER DEFAULT 0,
  FOREIGN KEY (user_id) REFERENCES user(id),
  FOREIGN KEY (track_id) REFERENCES songs(track_id)
    ON UPDATE CASCADE,
  UNIQUE (user_id, track_id)
);
"
# Create user_song_history table
sqlite3 $DB_FILE "
CREATE TABLE IF NOT EXISTS user_song_history (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id INTEGER NOT NULL,
  track_id TEXT NOT NULL,
  skipped_count INTEGER DEFAULT 0,
  listen_time_seconds INTEGER DEFAULT 0,
  date INTEGER NOT NULL,
  FOREIGN KEY (user_id) REFERENCES user(id),
  FOREIGN KEY (track_id) REFERENCES songs(track_id)
    ON UPDATE CASCADE
);
"
# Create user_session_data table
sqlite3 $DB_FILE "
CREATE TABLE IF NOT EXISTS user_session_data (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  data TEXT NOT NULL,
  session_token TEXT NOT NULL,
  expiry INTEGER,
  CONSTRAINT fk_session 
    FOREIGN KEY (session_token) 
    REFERENCES user_sessions(session_token)
    ON DELETE CASCADE
  UNIQUE (name, session_token)
);
"
# Create codes table
sqlite3 $DB_FILE "
CREATE TABLE IF NOT EXISTS codes (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id INTEGER,
  purpose TEXT,
  code TEXT,
  expiry INTEGER,
  FOREIGN KEY (user_id) REFERENCES user(id),
  UNIQUE (user_id, purpose)
);
"

# Create videos table
sqlite3 $DB_FILE "
CREATE TABLE IF NOT EXISTS videos (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT UNIQUE NOT NULL,
  artist_id TEXT,
  yt_link TEXT,
  date INTEGER,
  track_id TEXT UNIQUE,
  duration INTEGER,
  added INTEGER,
  rel_path TEXT,
  file_exists INTEGER DEFAULT 1,
  FOREIGN KEY (artist_id) REFERENCES artists(artist_id)
);
"

# Create video_data table
sqlite3 $DB_FILE "
CREATE TABLE IF NOT EXISTS video_data (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT UNIQUE NOT NULL,
  artist_id TEXT,
  tags TEXT,
  watch_time_seconds INTEGER DEFAULT 0,
  last_played INTEGER DEFAULT 0,
  track_id TEXT UNIQUE,
  FOREIGN KEY (artist_id) REFERENCES artists(artist_id),
  FOREIGN KEY (track_id) REFERENCES videos(track_id)
    ON UPDATE CASCADE
);
"

# Index for songs
sqlite3 $DB_FILE "CREATE INDEX IF NOT EXISTS idx_songs_track_id ON songs(track_id);"
# Index for song_data
sqlite3 $DB_FILE "CREATE INDEX IF NOT EXISTS idx_songs_data_track_id ON songs_data(track_id);"
# Index for artists
sqlite3 $DB_FILE "CREATE INDEX IF NOT EXISTS idx_artists_artist_id ON artists(artist_id);"
# Index for user_sessions
sqlite3 $DB_FILE "CREATE INDEX IF NOT EXISTS idx_user_sessions_user_id ON user_sessions(user_id);"
sqlite3 $DB_FILE "CREATE INDEX IF NOT EXISTS idx_user_sessions_session_token ON user_sessions(session_token);"
# Index for user_song_data
sqlite3 $DB_FILE "CREATE INDEX IF NOT EXISTS idx_user_song_data_user_id ON user_song_data(user_id);"
sqlite3 $DB_FILE "CREATE INDEX IF NOT EXISTS idx_user_song_data_track_id ON user_song_data(track_id);"
# Index for user_song_history
sqlite3 $DB_FILE "CREATE INDEX IF NOT EXISTS idx_user_song_history_user_id ON user_song_history(user_id);"
sqlite3 $DB_FILE "CREATE INDEX IF NOT EXISTS idx_user_song_history_track_id ON user_song_history(track_id);"
sqlite3 $DB_FILE "CREATE INDEX IF NOT EXISTS idx_user_song_history_date ON user_song_history(date);"
# Index for user_session_data
sqlite3 $DB_FILE "CREATE INDEX IF NOT EXISTS idx_user_session_data_data ON user_session_data(data);"
sqlite3 $DB_FILE "CREATE INDEX IF NOT EXISTS idx_user_session_data_session_token ON user_session_data(session_token);"
# Index for videos
sqlite3 $DB_FILE "CREATE INDEX IF NOT EXISTS idx_videos_track_id ON videos(track_id);"
# Index for video_data
sqlite3 $DB_FILE "CREATE INDEX IF NOT EXISTS idx_videos_data_track_id ON video_data(track_id);"

python "sort.py"
